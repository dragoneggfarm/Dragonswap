{"version":3,"sources":["utils/erc20.ts","hooks/useTokenBalance.ts","utils/lotteryUtils.js","hooks/useAllowance.ts","hooks/useFarmsWithBalance.ts","hooks/useAllEarnings.ts","views/Home/components/CardValue.tsx","views/Home/components/CakeHarvestBalance.tsx","views/Home/components/CakeWalletBalance.tsx","views/Home/components/FarmStakingCard.tsx","hooks/useGetLotteryHasDrawn.ts","hooks/useTickets.ts","components/TicketInput/TicketInput.tsx","views/Lottery/components/TicketCard/BuyTicketModal.tsx","hooks/useBuyLottery.ts","hooks/useApproval.ts","views/Lottery/components/TicketCard/PurchaseWarningModal.tsx","views/Home/components/CakeWinnings.tsx","views/Home/components/LotteryJackpot.tsx","views/Home/components/LotteryCard.tsx","views/Home/components/CakeStats.tsx","views/Home/components/TotalValueLockedCard.tsx","hooks/api.ts","views/Home/components/EarnAPYCard.tsx","hooks/useLotteryTotalPrizesUsd.ts","views/Home/components/WinCard.tsx","views/Home/Home.tsx"],"names":["getContract","provider","address","Web3","eth","Contract","erc20","getAllowance","lpContract","masterChefContract","account","a","methods","allowance","options","call","getTokenBalance","tokenAddress","userAddress","contract","balanceOf","balance","useTotalSupply","slowRefresh","useRefresh","useState","totalSupply","setTotalSupply","useEffect","cakeContract","cakeABI","getCakeAddress","supply","BigNumber","fetchTotalSupply","useBurnedBalance","setBalance","useWallet","ethereum","res","fetchBalance","useTokenBalance","fastRefresh","multiCall","abi","calls","web3","getWeb3","multi","MultiCallAbi","getMulticallAddress","itf","Interface","length","i","newCalls","slice","calldata","map","toLowerCase","encodeFunctionData","aggregate","returnData","concat","index","decodeFunctionResult","multiBuy","lotteryContract","price","numbersList","times","pow","toString","send","from","on","tx","transactionHash","console","error","getTickets","ticketsContract","customLotteryNum","issueIndex","issueIdex","getTicketsAmount","calls1","Array","apply","ticketAbi","tokenIds","id","calls2","ticketIssues","finalTokenids","forEach","ticketIssue","push","calls3","tickets","getLotteryStatus","multiClaim","claimedStatus","unClaimedIds","filter","lotteryAbi","rewards","finanltokenIds","r","getTotalClaim","drawed","calls4","claim","reduce","p","c","sum","getTotalRewards","getMax","maxNumber","getLotteryIssueIndex","getMatchingRewardLength","matchNumber","historyAmount","amount","LOTTERY_TICKET_PRICE","getWinningNumbers","numbers","parseInt","historyNumbers","winningNumbers","useLotteryAllowance","setAllowance","useLottery","useCake","fetchAllowance","refreshInterval","setInterval","clearInterval","useIfoAllowance","tokenContract","spenderAddress","dependency","fetch","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","farmsConfig","farm","getMasterChefAddress","name","params","pid","multicall","masterChefABI","rawResults","results","fetchBalances","useAllEarnings","balances","fetchAllBalances","CardValue","value","decimals","fontSize","useCountUp","start","end","duration","separator","undefined","countUp","update","updateValue","useRef","current","bold","CakeHarvestBalance","TranslateString","useI18n","earningsSum","accum","earning","div","toNumber","color","style","lineHeight","CakeWalletBalance","cakeBalance","getBalanceNumber","StyledFarmStakingCard","styled","Card","Block","CardImage","img","Label","theme","colors","textSubtle","Actions","FarmedStakingCard","pendingTx","setPendingTx","balancesWithValue","balanceType","onReward","useAllHarvest","farmWithBalance","harvestAllFarms","useCallback","size","mb","src","alt","width","height","disabled","onClick","fullWidth","UnlockButton","useGetLotteryHasDrawn","lotteryHasDrawn","setLotteryHasDrawn","state","fetchLotteryStatus","useTotalRewards","setRewards","useTotalClaim","claimAmount","setClaimAmount","claimLoading","setClaimLoading","useLotteryTicket","StyledTokenInput","StyledSpacer","props","spacing","StyledTokenAdornmentWrapper","StyledMaxText","primary","StyledTokenSymbol","span","TicketInput","max","symbol","availableSymbol","onChange","onSelectMax","Input","endAdornment","placeholder","toLocaleString","BuyTicketModal","onDismiss","val","setVal","setRequestedBuy","fullBalance","useMemo","getFullDisplayBalance","maxTickets","onMultiBuy","txHash","useMultiBuyLottery","setMax","fetchMax","useMaxNumber","handleBuy","Math","floor","random","handleSelectMax","Number","LOTTERY_MAX_NUMBER_OF_TICKETS","title","e","currentTarget","Tips","Announce","Final","ModalActions","variant","useApproval","onPresentApprove","requestedApproval","setRequestedApproval","onApprove","useLotteryApprove","handleApprove","TicketsList","WarningModal","CakeWinnings","LotteryJackpot","lotteryPrizeAmount","maximumFractionDigits","StyledLotteryCard","requesteClaim","setRequestedClaim","useModal","PurchaseWarningModal","onMultiClaim","lotteryTicketContract","useMultiClaimLottery","handleClaim","tokenName","onPresentBuy","marginRight","StyledCakeStats","Row","CakeStats","burnedBalance","cakeSupply","StyledTotalValueLockedCard","TotalValueLockedCard","data","setData","response","json","responsedata","fetchData","useGetStats","tvl","total_value_locked_all","mediaQueries","lg","CardMidContent","Heading","attrs","EarnAPYCard","farmsLP","useFarms","bnbPrice","usePriceBnbBusd","maxAPY","MIN_VALUE","getHighestAPY","activeFarms","multiplier","calculateAPY","farmsToDisplay","cakePriceVsBNB","find","CAKE_POOL_PID","tokenPriceVsQuote","tokenAmount","lpTotalInQuoteToken","cakeRewardPerBlock","CAKE_PER_BLOCK","poolWeight","cakeRewardPerYear","BLOCKS_PER_YEAR","apy","quoteTokenSymbol","QuoteToken","BUSD","CAKE","dual","cakeApy","dualApy","rewardPerBlock","plus","animation","justifyContent","exact","activeClassName","to","mt","useLotteryTotalPrizesUsd","totalRewards","usePriceCakeBusd","WinCard","lotteryPrize","round","Hero","Cards","BaseLayout","sm","Home","Page","as","FarmStakingCard","LotteryCard"],"mappings":"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","file":"static/js/8.5cad5606.chunk.js","sourcesContent":["import Web3 from 'web3'\nimport { provider as ProviderType } from 'web3-core'\nimport { Contract } from 'web3-eth-contract'\nimport { AbiItem } from 'web3-utils'\nimport erc20 from 'config/abi/erc20.json'\n\nexport const getContract = (provider: ProviderType, address: string) => {\n  const web3 = new Web3(provider)\n  const contract = new web3.eth.Contract((erc20 as unknown) as AbiItem, address)\n  return contract\n}\n\nexport const getAllowance = async (\n  lpContract: Contract,\n  masterChefContract: Contract,\n  account: string,\n): Promise<string> => {\n  try {\n    const allowance: string = await lpContract.methods.allowance(account, masterChefContract.options.address).call()\n    return allowance\n  } catch (e) {\n    return '0'\n  }\n}\n\nexport const getTokenBalance = async (\n  provider: ProviderType,\n  tokenAddress: string,\n  userAddress: string,\n): Promise<string> => {\n  const contract = getContract(provider, tokenAddress)\n  try {\n    const balance: string = await contract.methods.balanceOf(userAddress).call()\n    return balance\n  } catch (e) {\n    return '0'\n  }\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { provider } from 'web3-core'\nimport cakeABI from 'config/abi/cake.json'\nimport { getContract } from 'utils/web3'\nimport { getTokenBalance } from 'utils/erc20'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport useRefresh from './useRefresh'\n\nconst useTokenBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, account)\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, fastRefresh])\n\n  return balance\n}\n\nexport const useTotalSupply = () => {\n  const { slowRefresh } = useRefresh()\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\n\n  useEffect(() => {\n    async function fetchTotalSupply() {\n      const cakeContract = getContract(cakeABI, getCakeAddress())\n      const supply = await cakeContract.methods.totalSupply().call()\n      setTotalSupply(new BigNumber(supply))\n    }\n\n    fetchTotalSupply()\n  }, [slowRefresh])\n\n  return totalSupply\n}\n\nexport const useBurnedBalance = (tokenAddress: string) => {\n  const [balance, setBalance] = useState(new BigNumber(0))\n  const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n  const { slowRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTokenBalance(ethereum, tokenAddress, '0x000000000000000000000000000000000000dEaD')\n      setBalance(new BigNumber(res))\n    }\n\n    if (account && ethereum) {\n      fetchBalance()\n    }\n  }, [account, ethereum, tokenAddress, slowRefresh])\n\n  return balance\n}\n\nexport default useTokenBalance\n","/* eslint-disable no-await-in-loop */\nimport BigNumber from 'bignumber.js'\nimport { Interface } from '@ethersproject/abi'\nimport { getWeb3 } from 'utils/web3'\nimport MultiCallAbi from 'config/abi/Multicall.json'\nimport ticketAbi from 'config/abi/lotteryNft.json'\nimport lotteryAbi from 'config/abi/lottery.json'\nimport { LOTTERY_TICKET_PRICE } from 'config'\nimport { getMulticallAddress } from './addressHelpers'\n\nexport const multiCall = async (abi, calls) => {\n  const web3 = getWeb3()\n  const multi = new web3.eth.Contract(MultiCallAbi, getMulticallAddress())\n  const itf = new Interface(abi)\n  let res = []\n  if (calls.length > 100) {\n    let i = 0\n    while (i < calls.length / 100) {\n      const newCalls = calls.slice(i * 100, 100 * (i + 1))\n      const calldata = newCalls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n      const { returnData } = await multi.methods.aggregate(calldata).call()\n      i++\n      res = res.concat(returnData.map((call, index) => itf.decodeFunctionResult(newCalls[index][1], call)))\n    }\n  } else {\n    const calldata = calls.map((call) => [call[0].toLowerCase(), itf.encodeFunctionData(call[1], call[2])])\n    const { returnData } = await multi.methods.aggregate(calldata).call()\n    res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i][1], call))\n  }\n  return res\n}\n\nexport const multiBuy = async (lotteryContract, price, numbersList, account) => {\n  try {\n    return lotteryContract.methods\n      .multiBuy(new BigNumber(price).times(new BigNumber(10).pow(18)).toString(), numbersList)\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTickets = async (lotteryContract, ticketsContract, account, customLotteryNum) => {\n  const issueIdex = customLotteryNum || (await lotteryContract.methods.issueIndex().call())\n  const length = await getTicketsAmount(ticketsContract, account)\n\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length }).map((a, i) => [\n    ticketsContract.options.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\n  const ticketIssues = await multiCall(ticketAbi, calls2)\n\n  const finalTokenids = []\n  ticketIssues.forEach(async (ticketIssue, i) => {\n    if (ticketIssue.toString() === issueIdex) {\n      finalTokenids.push(tokenIds[i])\n    }\n  })\n  const calls3 = finalTokenids.map((id) => [ticketsContract.options.address, 'getLotteryNumbers', [id]])\n  const tickets = await multiCall(ticketAbi, calls3)\n\n  await getLotteryStatus(lotteryContract)\n  return tickets\n}\n\nexport const getTicketsAmount = async (ticketsContract, account) => {\n  return ticketsContract.methods.balanceOf(account).call()\n}\n\nexport const multiClaim = async (lotteryContract, ticketsContract, account) => {\n  await lotteryContract.methods.issueIndex().call()\n  const length = await getTicketsAmount(ticketsContract, account)\n  // eslint-disable-next-line prefer-spread\n  const calls1 = Array.apply(null, { length }).map((a, i) => [\n    ticketsContract.options.address,\n    'tokenOfOwnerByIndex',\n    [account, i],\n  ])\n  const res = await multiCall(ticketAbi, calls1)\n  const tokenIds = res.map((id) => id.toString())\n\n  const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\n  const claimedStatus = await multiCall(ticketAbi, calls2)\n\n  const unClaimedIds = tokenIds.filter((id, index) => !claimedStatus[index][0])\n\n  const calls3 = unClaimedIds.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\n  const rewards = await multiCall(lotteryAbi, calls3)\n\n  let finanltokenIds = []\n  rewards.forEach((r, i) => {\n    if (r > 0) {\n      finanltokenIds.push(unClaimedIds[i])\n    }\n  })\n\n  if (finanltokenIds.length > 200) {\n    finanltokenIds = finanltokenIds.slice(0, 200)\n  }\n\n  try {\n    return lotteryContract.methods\n      .multiClaim(finanltokenIds)\n      .send({ from: account })\n      .on('transactionHash', (tx) => {\n        return tx.transactionHash\n      })\n  } catch (err) {\n    return console.error(err)\n  }\n}\n\nexport const getTotalClaim = async (lotteryContract, ticketsContract, account) => {\n  try {\n    const issueIdex = await lotteryContract.methods.issueIndex().call()\n    const length = await getTicketsAmount(ticketsContract, account)\n    // eslint-disable-next-line prefer-spread\n    const calls1 = Array.apply(null, { length }).map((a, i) => [\n      ticketsContract.options.address,\n      'tokenOfOwnerByIndex',\n      [account, i],\n    ])\n    const res = await multiCall(ticketAbi, calls1)\n    const tokenIds = res.map((id) => id.toString())\n    const calls2 = tokenIds.map((id) => [ticketsContract.options.address, 'getLotteryIssueIndex', [id]])\n    const ticketIssues = await multiCall(ticketAbi, calls2)\n    const calls3 = tokenIds.map((id) => [ticketsContract.options.address, 'getClaimStatus', [id]])\n    const claimedStatus = await multiCall(ticketAbi, calls3)\n\n    const drawed = await getLotteryStatus(lotteryContract)\n\n    const finalTokenids = []\n    ticketIssues.forEach(async (ticketIssue, i) => {\n      // eslint-disable-next-line no-empty\n      if (!drawed && ticketIssue.toString() === issueIdex) {\n      } else if (!claimedStatus[i][0]) {\n        finalTokenids.push(tokenIds[i])\n      }\n    })\n\n    const calls4 = finalTokenids.map((id) => [lotteryContract.options.address, 'getRewardView', [id]])\n\n    const rewards = await multiCall(lotteryAbi, calls4)\n    const claim = rewards.reduce((p, c) => BigNumber.sum(p, c), BigNumber(0))\n\n    return claim\n  } catch (err) {\n    console.error(err)\n  }\n  return BigNumber(0)\n}\n\nexport const getTotalRewards = async (lotteryContract) => {\n  const issueIdex = await lotteryContract.methods.issueIndex().call()\n  return lotteryContract.methods.getTotalRewards(issueIdex).call()\n}\n\nexport const getMax = async (lotteryContract) => {\n  return lotteryContract.methods.maxNumber().call()\n}\n\nexport const getLotteryIssueIndex = async (lotteryContract) => {\n  const issueIndex = await lotteryContract.methods.issueIndex().call()\n  return issueIndex\n}\n\nexport const getLotteryStatus = async (lotteryContract) => {\n  return lotteryContract.methods.drawed().call()\n}\n\nexport const getMatchingRewardLength = async (lotteryContract, matchNumber) => {\n  let issueIdex = await lotteryContract.methods.issueIndex().call()\n  const drawed = await lotteryContract.methods.drawed().call()\n  if (!drawed) {\n    issueIdex -= 1\n  }\n  try {\n    const amount = await lotteryContract.methods.historyAmount(issueIdex, 5 - matchNumber).call()\n    return amount / 1e18 / LOTTERY_TICKET_PRICE\n  } catch (err) {\n    console.error(err)\n  }\n  return 0\n}\n\nexport const getWinningNumbers = async (lotteryContract) => {\n  const issueIdex = await lotteryContract.methods.issueIndex().call()\n  const numbers = []\n  const drawed = await lotteryContract.methods.drawed().call()\n\n  if (!drawed && parseInt(issueIdex, 10) === 0) {\n    return [0, 0, 0, 0]\n  }\n  if (!drawed) {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.historyNumbers(issueIdex - 1, i).call()).toString())\n    }\n  } else {\n    for (let i = 0; i < 4; i++) {\n      numbers.push(+(await lotteryContract.methods.winningNumbers(i).call()).toString())\n    }\n  }\n  return numbers\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Contract } from 'web3-eth-contract'\nimport { useCake, useLottery } from './useContract'\nimport { getAllowance } from '../utils/erc20'\n\n// Retrieve lottery allowance\nexport const useLotteryAllowance = () => {\n  const [allowance, setAllowance] = useState(new BigNumber(0))\n  const { account }: { account: string } = useWallet()\n  const lotteryContract = useLottery()\n  const cakeContract = useCake()\n\n  useEffect(() => {\n    const fetchAllowance = async () => {\n      const res = await getAllowance(cakeContract, lotteryContract, account)\n      setAllowance(new BigNumber(res))\n    }\n\n    if (account && cakeContract && cakeContract) {\n      fetchAllowance()\n    }\n    const refreshInterval = setInterval(fetchAllowance, 10000)\n    return () => clearInterval(refreshInterval)\n  }, [account, cakeContract, lotteryContract])\n\n  return allowance\n}\n\n// Retrieve IFO allowance\nexport const useIfoAllowance = (tokenContract: Contract, spenderAddress: string, dependency?: any) => {\n  const { account }: { account: string } = useWallet()\n  const [allowance, setAllowance] = useState(null)\n\n  useEffect(() => {\n    const fetch = async () => {\n      try {\n        const res = await tokenContract.methods.allowance(account, spenderAddress).call()\n        setAllowance(new BigNumber(res))\n      } catch (e) {\n        setAllowance(null)\n      }\n    }\n    fetch()\n  }, [account, spenderAddress, tokenContract, dependency])\n\n  return allowance\n}\n","import { useEffect, useState } from 'react'\nimport BigNumber from 'bignumber.js'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport { FarmConfig } from 'config/constants/types'\nimport useRefresh from './useRefresh'\n\nexport interface FarmWithBalance extends FarmConfig {\n  balance: BigNumber\n}\n\nconst useFarmsWithBalance = () => {\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\n  const { account } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const rawResults = await multicall(masterChefABI, calls)\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\n\n      setFarmsWithBalances(results)\n    }\n\n    if (account) {\n      fetchBalances()\n    }\n  }, [account, fastRefresh])\n\n  return farmsWithBalances\n}\n\nexport default useFarmsWithBalance\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport multicall from 'utils/multicall'\nimport { getMasterChefAddress } from 'utils/addressHelpers'\nimport masterChefABI from 'config/abi/masterchef.json'\nimport { farmsConfig } from 'config/constants'\nimport useRefresh from './useRefresh'\n\nconst useAllEarnings = () => {\n  const [balances, setBalance] = useState([])\n  const { account }: { account: string } = useWallet()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchAllBalances = async () => {\n      const calls = farmsConfig.map((farm) => ({\n        address: getMasterChefAddress(),\n        name: 'pendingCake',\n        params: [farm.pid, account],\n      }))\n\n      const res = await multicall(masterChefABI, calls)\n\n      setBalance(res)\n    }\n\n    if (account) {\n      fetchAllBalances()\n    }\n  }, [account, fastRefresh])\n\n  return balances\n}\n\nexport default useAllEarnings\n","import React, { useEffect, useRef } from 'react'\nimport { useCountUp } from 'react-countup'\nimport { Text } from '@pancakeswap-libs/uikit'\n\ninterface CardValueProps {\n  value: number\n  decimals?: number\n  fontSize?: string\n}\n\nconst CardValue: React.FC<CardValueProps> = ({ value, decimals, fontSize = '40px' }) => {\n  const { countUp, update } = useCountUp({\n    start: 0,\n    end: value,\n    duration: 1,\n    separator: ',',\n    decimals:\n      // eslint-disable-next-line no-nested-ternary\n      decimals !== undefined ? decimals : value < 0 ? 4 : value > 1e5 ? 0 : 3,\n  })\n\n  const updateValue = useRef(update)\n\n  useEffect(() => {\n    updateValue.current(value)\n  }, [value, updateValue])\n\n  return (\n    <Text bold fontSize={fontSize}>\n      {countUp}\n    </Text>\n  )\n}\n\nexport default CardValue\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport useI18n from 'hooks/useI18n'\nimport useAllEarnings from 'hooks/useAllEarnings'\nimport CardValue from './CardValue'\n\nconst CakeHarvestBalance = () => {\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const allEarnings = useAllEarnings()\n  const earningsSum = allEarnings.reduce((accum, earning) => {\n    return accum + new BigNumber(earning).div(new BigNumber(10).pow(18)).toNumber()\n  }, 0)\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '60px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={earningsSum} />\n}\n\nexport default CakeHarvestBalance\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWalletBalance = () => {\n  const TranslateString = useI18n()\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const { account } = useWallet()\n\n  if (!account) {\n    return (\n      <Text color=\"textDisabled\" style={{ lineHeight: '36px' }}>\n        {TranslateString(298, 'Locked')}\n      </Text>\n    )\n  }\n\n  return <CardValue value={getBalanceNumber(cakeBalance)} fontSize=\"24px\" />\n}\n\nexport default CakeWalletBalance\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button } from '@pancakeswap-libs/uikit'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport useI18n from 'hooks/useI18n'\nimport { useAllHarvest } from 'hooks/useHarvest'\nimport useFarmsWithBalance from 'hooks/useFarmsWithBalance'\nimport UnlockButton from 'components/UnlockButton'\nimport CakeHarvestBalance from './CakeHarvestBalance'\nimport CakeWalletBalance from './CakeWalletBalance'\n\nconst StyledFarmStakingCard = styled(Card)`\n  background-image: url('/images/crystal.png');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n  \n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  margin-top: 24px;\n`\n\nconst FarmedStakingCard = () => {\n  const [pendingTx, setPendingTx] = useState(false)\n  const { account } = useWallet()\n  const TranslateString = useI18n()\n  const farmsWithBalance = useFarmsWithBalance()\n  const balancesWithValue = farmsWithBalance.filter((balanceType) => balanceType.balance.toNumber() > 0)\n\n  const { onReward } = useAllHarvest(balancesWithValue.map((farmWithBalance) => farmWithBalance.pid))\n\n  const harvestAllFarms = useCallback(async () => {\n    setPendingTx(true)\n    try {\n      await onReward()\n    } catch (error) {\n      // TODO: find a way to handle when the user rejects transaction or it fails\n    } finally {\n      setPendingTx(false)\n    }\n  }, [onReward])\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\" color=\"#a000e6\">\n          {TranslateString(542, 'Farms & Staking')}\n        </Heading>\n        <CardImage src=\"/images/crystal.png\" alt=\"cake logo\" width={64} height={64} />\n        <Block>\n          <CakeHarvestBalance />\n          <Label>{TranslateString(544, 'DSWAP to Harvest')}</Label>\n        </Block>\n        <Block>\n          <CakeWalletBalance />\n          <Label>{TranslateString(546, 'DSWAP in Wallet')}</Label>\n        </Block>\n        <Actions>\n          {account ? (\n            <Button\n              \n              id=\"harvest-all\"\n              disabled={balancesWithValue.length <= 0 || pendingTx}\n              onClick={harvestAllFarms}\n              fullWidth\n            >\n              {pendingTx\n                ? TranslateString(548, 'Collecting DRGN')\n                : TranslateString(532, `Harvest all (${balancesWithValue.length})`)}\n            </Button>\n          ) : (\n            <UnlockButton fullWidth />\n          )}\n        </Actions>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import { useEffect, useState } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useLottery } from 'hooks/useContract'\nimport { getLotteryStatus } from 'utils/lotteryUtils'\n\n/**\n * Returns whether or not the current lottery has drawn numbers\n *\n * @return {Boolean}\n */\nconst useGetLotteryHasDrawn = () => {\n  const [lotteryHasDrawn, setLotteryHasDrawn] = useState(true)\n  const { account } = useWallet()\n  const lotteryContract = useLottery()\n\n  useEffect(() => {\n    if (account && lotteryContract) {\n      const fetchLotteryStatus = async () => {\n        const state = await getLotteryStatus(lotteryContract)\n        setLotteryHasDrawn(state)\n      }\n\n      fetchLotteryStatus()\n    }\n  }, [account, lotteryContract])\n\n  return lotteryHasDrawn\n}\n\nexport default useGetLotteryHasDrawn\n","import { useCallback, useState, useEffect } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport BigNumber from 'bignumber.js'\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\nimport useRefresh from './useRefresh'\nimport {\n  getTotalRewards,\n  getTotalClaim,\n  getMatchingRewardLength,\n  getWinningNumbers,\n  getTickets,\n} from '../utils/lotteryUtils'\n\nconst useTickets = (lotteryNumber = null) => {\n  const [tickets, setTickets] = useState([])\n  const { account } = useWallet()\n  const ticketsContract = useLotteryTicket()\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTickets(lotteryContract, ticketsContract, account, lotteryNumber)\n      setTickets(res)\n    }\n\n    if (account && lotteryContract && ticketsContract) {\n      fetchBalance()\n    }\n  }, [account, lotteryContract, ticketsContract, fastRefresh, lotteryNumber])\n\n  return tickets\n}\n\nexport const useTotalRewards = () => {\n  const [rewards, setRewards] = useState(new BigNumber(0))\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const res = await getTotalRewards(lotteryContract)\n      setRewards(new BigNumber(res))\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [lotteryContract, fastRefresh])\n\n  return rewards\n}\n\nexport const useTotalClaim = () => {\n  const [claimAmount, setClaimAmount] = useState(new BigNumber(0))\n  const [claimLoading, setClaimLoading] = useState(false)\n  const { account } = useWallet()\n  const ticketsContract = useLotteryTicket()\n  const lotteryContract = useLottery()\n\n  const fetchBalance = useCallback(async () => {\n    setClaimLoading(true)\n    const claim = await getTotalClaim(lotteryContract, ticketsContract, account)\n    setClaimAmount(claim)\n    setClaimLoading(false)\n  }, [account, lotteryContract, ticketsContract])\n\n  useEffect(() => {\n    if (account && lotteryContract && ticketsContract) {\n      fetchBalance()\n    }\n  }, [account, fetchBalance, lotteryContract, ticketsContract])\n\n  return { claimLoading, claimAmount }\n}\n\nexport const useWinningNumbers = () => {\n  const [winngNumbers, setWinningNumbers] = useState([0, 0, 0, 0])\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const rewards = await getWinningNumbers(lotteryContract)\n      setWinningNumbers(rewards)\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [fastRefresh, lotteryContract, setWinningNumbers])\n\n  return winngNumbers\n}\n\nexport const useMatchingRewardLength = (numbers) => {\n  const [matchingNumbers, setMatchingNumbers] = useState(0)\n  const lotteryContract = useLottery()\n  const { fastRefresh } = useRefresh()\n\n  useEffect(() => {\n    const fetchBalance = async () => {\n      const matchedNumbaers = await getMatchingRewardLength(lotteryContract, numbers)\n      setMatchingNumbers(matchedNumbaers)\n    }\n\n    if (lotteryContract) {\n      fetchBalance()\n    }\n  }, [lotteryContract, numbers, fastRefresh])\n\n  return matchingNumbers\n}\n\nexport default useTickets\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Button } from '@pancakeswap-libs/uikit'\nimport useI18n from '../../hooks/useI18n'\nimport Input, { InputProps } from '../Input'\n\ninterface TokenInputProps extends InputProps {\n  max: number | string\n  symbol: string\n  availableSymbol: string\n  onSelectMax?: () => void\n}\n\nconst TicketInput: React.FC<TokenInputProps> = ({ max, symbol, availableSymbol, onChange, onSelectMax, value }) => {\n  const TranslateString = useI18n()\n\n  return (\n    <StyledTokenInput>\n      <Input\n        endAdornment={\n          <StyledTokenAdornmentWrapper>\n            <StyledTokenSymbol>{symbol}</StyledTokenSymbol>\n            <StyledSpacer />\n            <div>\n              <Button size=\"sm\" onClick={onSelectMax}>\n                {TranslateString(452, 'Max')}\n              </Button>\n            </div>\n          </StyledTokenAdornmentWrapper>\n        }\n        onChange={onChange}\n        placeholder=\"0\"\n        value={value}\n      />\n      <StyledMaxText>{TranslateString(454, `${max.toLocaleString()} ${availableSymbol} Available`)}</StyledMaxText>\n    </StyledTokenInput>\n  )\n}\n\nconst StyledTokenInput = styled.div``\n\nconst StyledSpacer = styled.div`\n  width: ${(props) => props.theme.spacing[3]}px;\n`\n\nconst StyledTokenAdornmentWrapper = styled.div`\n  align-items: center;\n  display: flex;\n`\n\nconst StyledMaxText = styled.div`\n  align-items: center;\n  color: ${(props) => props.theme.colors.primary};\n  display: flex;\n  font-size: 14px;\n  font-weight: 700;\n  height: 44px;\n  justify-content: flex-end;\n`\n\nconst StyledTokenSymbol = styled.span`\n  color: ${(props) => props.theme.colors.primary};\n  font-weight: 700;\n`\n\nexport default TicketInput\n","import BigNumber from 'bignumber.js'\nimport React, { useCallback, useMemo, useState } from 'react'\nimport styled from 'styled-components'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport { getFullDisplayBalance } from 'utils/formatBalance'\nimport TicketInput from 'components/TicketInput'\nimport ModalActions from 'components/ModalActions'\nimport { useMultiBuyLottery, useMaxNumber } from 'hooks/useBuyLottery'\nimport useI18n from 'hooks/useI18n'\nimport { LOTTERY_MAX_NUMBER_OF_TICKETS, LOTTERY_TICKET_PRICE } from 'config'\n\ninterface BuyTicketModalProps {\n  max: BigNumber\n  onConfirm?: (amount: string, numbers: Array<number>) => void\n  onDismiss?: () => void\n  tokenName?: string\n}\n\nconst BuyTicketModal: React.FC<BuyTicketModalProps> = ({ max, onDismiss }) => {\n  const [val, setVal] = useState('1')\n  const [pendingTx, setPendingTx] = useState(false)\n  const [, setRequestedBuy] = useState(false)\n  const TranslateString = useI18n()\n  const fullBalance = useMemo(() => {\n    return getFullDisplayBalance(max)\n  }, [max])\n\n  const maxTickets = useMemo(() => {\n    return parseInt(getFullDisplayBalance(max.div(LOTTERY_TICKET_PRICE)), 10)\n  }, [max])\n\n  const handleChange = (e: React.FormEvent<HTMLInputElement>) => setVal(e.currentTarget.value)\n\n  const { onMultiBuy } = useMultiBuyLottery()\n  const maxNumber = useMaxNumber()\n  const handleBuy = useCallback(async () => {\n    try {\n      setRequestedBuy(true)\n      const length = parseInt(val)\n      // @ts-ignore\n      // eslint-disable-next-line prefer-spread\n      const numbers = Array.apply(null, { length }).map(() => [\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n        Math.floor(Math.random() * maxNumber) + 1,\n      ])\n      const txHash = await onMultiBuy(LOTTERY_TICKET_PRICE.toString(), numbers)\n      // user rejected tx or didn't go thru\n      if (txHash) {\n        setRequestedBuy(false)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onMultiBuy, setRequestedBuy, maxNumber, val])\n\n  const handleSelectMax = useCallback(() => {\n    if (Number(maxTickets) > LOTTERY_MAX_NUMBER_OF_TICKETS) {\n      setVal(LOTTERY_MAX_NUMBER_OF_TICKETS.toString())\n    } else {\n      setVal(maxTickets.toString())\n    }\n  }, [maxTickets])\n\n  const cakeCosts = (amount: string): number => {\n    return +amount * LOTTERY_TICKET_PRICE\n  }\n  return (\n    <Modal title={TranslateString(450, 'Enter amount of tickets to buy')} onDismiss={onDismiss}>\n      <TicketInput\n        value={val}\n        onSelectMax={handleSelectMax}\n        onChange={handleChange}\n        max={fullBalance}\n        symbol=\"TICKET\"\n        availableSymbol=\"CAKE\"\n      />\n      <div>\n        <Tips>{TranslateString(999, `1 Ticket = ${LOTTERY_TICKET_PRICE} CAKE`)}</Tips>\n      </div>\n      <div>\n        <Announce>\n          {TranslateString(\n            478,\n            'Ticket purchases are final. Your CAKE cannot be returned to you after buying tickets.',\n          )}\n        </Announce>\n        <Final>{TranslateString(460, `You will spend: ${cakeCosts(val)} CAKE`)}</Final>\n      </div>\n      <ModalActions>\n        <Button fullWidth variant=\"secondary\" onClick={onDismiss}>\n          {TranslateString(462, 'Cancel')}\n        </Button>\n        <Button\n          id=\"lottery-buy-complete\"\n          fullWidth\n          disabled={\n            pendingTx ||\n            parseInt(val) > Number(maxTickets) ||\n            parseInt(val) > LOTTERY_MAX_NUMBER_OF_TICKETS ||\n            parseInt(val) < 1\n          }\n          onClick={async () => {\n            setPendingTx(true)\n            await handleBuy()\n            setPendingTx(false)\n            onDismiss()\n          }}\n        >\n          {pendingTx ? TranslateString(488, 'Pending Confirmation') : TranslateString(464, 'Confirm')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nexport default BuyTicketModal\n\nconst Tips = styled.div`\n  margin-left: 0.4em;\n  font-size: 14px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nconst Final = styled.div`\n  margin-top: 1em;\n  text-align: center;\n  font-size: 20px;\n  font-weight: 600;\n  color: ${(props) => props.theme.colors.primary};\n`\nconst Announce = styled.div`\n  margin-top: 1em;\n  margin-left: 0.4em;\n  color: #ed4b9e;\n`\n","import { useCallback, useState, useEffect } from 'react'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { useLottery, useLotteryTicket } from 'hooks/useContract'\nimport { multiClaim, getMax, multiBuy } from '../utils/lotteryUtils'\n\nexport const useMultiClaimLottery = () => {\n  const { account } = useWallet()\n  const lotteryContract = useLottery()\n  const lotteryTicketContract = useLotteryTicket()\n\n  const handleClaim = useCallback(async () => {\n    try {\n      const txHash = await multiClaim(lotteryContract, lotteryTicketContract, account)\n      return txHash\n    } catch (e) {\n      return false\n    }\n  }, [account, lotteryContract, lotteryTicketContract])\n\n  return { onMultiClaim: handleClaim }\n}\n\nexport const useMultiBuyLottery = () => {\n  const { account } = useWallet()\n  const lotteryContract = useLottery()\n\n  const handleBuy = useCallback(\n    async (amount: string, numbers: Array<any>) => {\n      try {\n        const txHash = await multiBuy(lotteryContract, amount, numbers, account)\n        return txHash\n      } catch (e) {\n        return false\n      }\n    },\n    [account, lotteryContract],\n  )\n\n  return { onMultiBuy: handleBuy }\n}\n\nexport const useMaxNumber = () => {\n  const [max, setMax] = useState(5)\n  const lotteryContract = useLottery()\n\n  const fetchMax = useCallback(async () => {\n    const maxNumber = await getMax(lotteryContract)\n    setMax(maxNumber)\n  }, [lotteryContract])\n\n  useEffect(() => {\n    if (lotteryContract) {\n      fetchMax()\n    }\n  }, [lotteryContract, fetchMax])\n\n  return max\n}\n","import { useCallback, useState } from 'react'\nimport { useLotteryApprove } from './useApprove'\n\nexport const useApproval = (onPresentApprove: () => void) => {\n  const [requestedApproval, setRequestedApproval] = useState(false)\n  const { onApprove } = useLotteryApprove()\n\n  const handleApprove = useCallback(async () => {\n    try {\n      setRequestedApproval(true)\n      const txHash = await onApprove()\n      // user rejected tx or didn't go thru\n      if (!txHash) {\n        setRequestedApproval(false)\n      }\n      onPresentApprove()\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onApprove, onPresentApprove])\n\n  return { handleApprove, requestedApproval }\n}\n\nexport default useApproval\n","import React from 'react'\nimport { Button, Modal } from '@pancakeswap-libs/uikit'\nimport ModalActions from 'components/ModalActions'\nimport styled from 'styled-components'\nimport useI18n from 'hooks/useI18n'\n\nconst WarningModal: React.FC<{ onDismiss?: () => void }> = ({ onDismiss }) => {\n  const TranslateString = useI18n()\n\n  return (\n    <Modal title={TranslateString(466, 'Warning')} onDismiss={onDismiss}>\n      <TicketsList>\n        {TranslateString(468, 'Lottery ticket purchases are final.')}\n        <br />\n        {TranslateString(470, 'Your CAKE will not be returned to you after you spend it to buy tickets.')}\n        <br />\n        {TranslateString(472, 'Tickets are only valid for one lottery draw, and will be burned after the draw.')}\n        <br />\n        {TranslateString(\n          474,\n          'Buying tickets does not guarantee you will win anything. Please only participate once you understand the risks.',\n        )}\n      </TicketsList>\n      <ModalActions>\n        <Button fullWidth onClick={onDismiss}>\n          {TranslateString(476, 'I understand')}\n        </Button>\n      </ModalActions>\n    </Modal>\n  )\n}\n\nconst TicketsList = styled.div`\n  text-align: left;\n  overflow-y: auto;\n  max-height: 400px;\n  color: ${(props) => props.theme.colors.primary};\n`\n\nexport default WarningModal\n","import React from 'react'\nimport { useTotalClaim } from 'hooks/useTickets'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport CardValue from './CardValue'\n\nconst CakeWinnings = () => {\n  const { claimAmount } = useTotalClaim()\n  return <CardValue value={getBalanceNumber(claimAmount)} />\n}\n\nexport default CakeWinnings\n","import React from 'react'\nimport { Text } from '@pancakeswap-libs/uikit'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalRewards } from 'hooks/useTickets'\n\nconst LotteryJackpot = () => {\n  const lotteryPrizeAmount = useTotalRewards()\n\n  return (\n    <Text bold fontSize=\"24px\">\n      {getBalanceNumber(lotteryPrizeAmount).toLocaleString(undefined, {\n        maximumFractionDigits: 2,\n      })}\n    </Text>\n  )\n}\n\nexport default LotteryJackpot\n","import React, { useState, useCallback } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Button, useModal } from '@pancakeswap-libs/uikit'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport useI18n from 'hooks/useI18n'\nimport useGetLotteryHasDrawn from 'hooks/useGetLotteryHasDrawn'\nimport useTokenBalance from 'hooks/useTokenBalance'\nimport { useMultiClaimLottery } from 'hooks/useBuyLottery'\nimport { useTotalClaim } from 'hooks/useTickets'\nimport BuyModal from 'views/Lottery/components/TicketCard/BuyTicketModal'\nimport { useLotteryAllowance } from 'hooks/useAllowance'\nimport { useApproval } from 'hooks/useApproval'\nimport PurchaseWarningModal from 'views/Lottery/components/TicketCard/PurchaseWarningModal'\nimport CakeWinnings from './CakeWinnings'\nimport LotteryJackpot from './LotteryJackpot'\n\nconst StyledLotteryCard = styled(Card)`\n  background-image: url('/images/ticket-bg.png');\n  background-repeat: no-repeat;\n  background-position: top right;\n  min-height: 376px;\n`\n\nconst Block = styled.div`\n  margin-bottom: 16px;\n`\n\nconst CardImage = styled.img`\n  margin-bottom: 16px;\n`\n\nconst Label = styled.div`\n  color: ${({ theme }) => theme.colors.textSubtle};\n  font-size: 14px;\n`\n\nconst Actions = styled.div`\n  display: flex;\n  margin-top: 24px;\n  button {\n    flex: 1 0 50%;\n  }\n`\n\nconst FarmedStakingCard = () => {\n  const lotteryHasDrawn = useGetLotteryHasDrawn()\n  const [requesteClaim, setRequestedClaim] = useState(false)\n  const TranslateString = useI18n()\n  const allowance = useLotteryAllowance()\n  const [onPresentApprove] = useModal(<PurchaseWarningModal />)\n  const { claimAmount } = useTotalClaim()\n  const { onMultiClaim } = useMultiClaimLottery()\n  const cakeBalance = useTokenBalance(getCakeAddress())\n  const { handleApprove, requestedApproval } = useApproval(onPresentApprove)\n\n  const handleClaim = useCallback(async () => {\n    try {\n      setRequestedClaim(true)\n      const txHash = await onMultiClaim()\n      // user rejected tx or didn't go thru\n      if (txHash) {\n        setRequestedClaim(false)\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }, [onMultiClaim, setRequestedClaim])\n\n  const renderLotteryTicketButtonBuyOrApprove = () => {\n    if (!allowance.toNumber()) {\n      return (\n        <Button fullWidth disabled={requestedApproval} onClick={handleApprove}>\n          {TranslateString(494, 'Approve DSWAP')}\n        </Button>\n      )\n    }\n    return (\n      <Button id=\"dashboard-buy-tickets\" variant=\"secondary\" onClick={onPresentBuy} disabled={lotteryHasDrawn}>\n        {TranslateString(558, 'Buy Tickets')}\n      </Button>\n    )\n  }\n\n  const [onPresentBuy] = useModal(<BuyModal max={cakeBalance} tokenName=\"DSWAP\" />)\n\n  return (\n    <StyledLotteryCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"65px\" color=\"#a000e6\">\n          {TranslateString(550, 'Your Lottery Winnings')}\n        </Heading>\n        <CardImage src=\"/images/ticket.png\" alt=\"cake logo\" width={100} height={100} />\n        <Block>\n          <CakeWinnings />\n          <Label>{TranslateString(552, 'DSWAP to Collect')}</Label>\n        </Block>\n        <Block>\n          <LotteryJackpot />\n          <Label>{TranslateString(554, 'Total jackpot this round')}</Label>\n        </Block>\n        <Actions>\n          <Button\n            id=\"dashboard-collect-winnings\"\n            disabled={getBalanceNumber(claimAmount) === 0 || requesteClaim}\n            onClick={handleClaim}\n            style={{ marginRight: '8px' }}\n          >\n            {TranslateString(556, 'Collect Winnings')}\n          </Button>\n          {renderLotteryTicketButtonBuyOrApprove()}\n        </Actions>\n      </CardBody>\n    </StyledLotteryCard>\n  )\n}\n\nexport default FarmedStakingCard\n","import React from 'react'\nimport { Card, CardBody, Heading, Text } from '@pancakeswap-libs/uikit'\nimport styled from 'styled-components'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalSupply, useBurnedBalance } from 'hooks/useTokenBalance'\nimport useI18n from 'hooks/useI18n'\nimport { getCakeAddress } from 'utils/addressHelpers'\nimport CardValue from './CardValue'\n\nconst StyledCakeStats = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n`\n\nconst Row = styled.div`\n  align-items: center;\n  display: flex;\n  font-size: 14px;\n  justify-content: space-between;\n  margin-bottom: 8px;\n`\n\nconst CakeStats = () => {\n  const TranslateString = useI18n()\n  const totalSupply = useTotalSupply()\n  const burnedBalance = useBurnedBalance(getCakeAddress())\n  const cakeSupply = totalSupply ? getBalanceNumber(totalSupply) - getBalanceNumber(burnedBalance) : 0\n\n  return (\n    <StyledCakeStats>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\" color=\"#a000e6\">\n          {TranslateString(534, 'DSWAP Stats')}\n        </Heading>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(536, 'Total DSWAP Supply')}</Text>\n          {cakeSupply && <CardValue fontSize=\"14px\" value={cakeSupply} />}\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(538, 'Total DSWAP Burned')}</Text>\n          <CardValue fontSize=\"14px\" value={getBalanceNumber(burnedBalance)} />\n        </Row>\n        <Row>\n          <Text fontSize=\"14px\">{TranslateString(540, 'New DSWAP/block')}</Text>\n          <CardValue fontSize=\"14px\" decimals={0} value={25} />\n        </Row>\n      </CardBody>\n    </StyledCakeStats>\n  )\n}\n\nexport default CakeStats\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Card, CardBody, Heading, Skeleton, Text } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport { useGetStats } from 'hooks/api'\n\nconst StyledTotalValueLockedCard = styled(Card)`\n  align-items: center;\n  display: flex;\n  flex: 1;\n`\n\nconst TotalValueLockedCard = () => {\n  const TranslateString = useI18n()\n  const data = useGetStats()\n  const tvl = data ? data.total_value_locked_all.toLocaleString('en-US', { maximumFractionDigits: 0 }) : null\n\n  return (\n    <StyledTotalValueLockedCard>\n      <CardBody>\n        <Heading size=\"xl\" mb=\"24px\" color=\"#a000e6\">\n          {TranslateString(762, 'Total Value Locked (TVL)')}\n        </Heading>\n        {data ? (\n          <>\n            <Heading size=\"xl\">{`$${tvl}`}</Heading>\n            <Text color=\"textSubtle\">{TranslateString(764, 'Across all LPs and Syrup Pools')}</Text>\n          </>\n        ) : (\n          <>\n            <Skeleton height={66} />\n          </>\n        )}\n      </CardBody>\n    </StyledTotalValueLockedCard>\n  )\n}\n\nexport default TotalValueLockedCard\n","import { useEffect, useState } from 'react'\n\n/*\n * Due to Cors the api was forked and a proxy was created\n * @see https://github.com/pancakeswap/gatsby-pancake-api/commit/e811b67a43ccc41edd4a0fa1ee704b2f510aa0ba\n */\nexport const baseUrl = 'https://api.pancakeswap.com/api/v1'\n\n/* eslint-disable camelcase */\n\nexport interface TradePair {\n  swap_pair_contract: string\n  base_symbol: string\n  quote_symbol: string\n  last_price: number\n  base_volume_24_h: number\n  quote_volume_24_h: number\n}\n\nexport interface ApiStatResponse {\n  update_at: string\n  '24h_total_volume': number\n  total_value_locked: number\n  total_value_locked_all: number\n  trade_pairs: {\n    [key: string]: TradePair\n  }\n}\n\nexport const useGetStats = () => {\n  const [data, setData] = useState<ApiStatResponse | null>(null)\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const response = await fetch(`${baseUrl}/stat`)\n        const responsedata: ApiStatResponse = await response.json()\n\n        setData(responsedata)\n      } catch (error) {\n        console.error('Unable to fetch data:', error)\n      }\n    }\n\n    fetchData()\n  }, [setData])\n\n  return data\n}\n","import React, { useCallback, useRef } from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon, Skeleton } from '@pancakeswap-libs/uikit'\nimport { NavLink } from 'react-router-dom'\nimport useI18n from 'hooks/useI18n'\nimport BigNumber from 'bignumber.js'\nimport { QuoteToken } from 'config/constants/types'\nimport { useFarms, usePriceBnbBusd } from 'state/hooks'\nimport { BLOCKS_PER_YEAR, CAKE_PER_BLOCK, CAKE_POOL_PID } from 'config'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\n  line-height: 44px;\n`\nconst EarnAPYCard = () => {\n  const TranslateString = useI18n()\n  const farmsLP = useFarms()\n  const bnbPrice = usePriceBnbBusd()\n\n  const maxAPY = useRef(Number.MIN_VALUE)\n\n  const getHighestAPY = () => {\n    const activeFarms = farmsLP.filter((farm) => farm.pid !== 0 && farm.multiplier !== '0X')\n\n    calculateAPY(activeFarms)\n\n    return (maxAPY.current * 100).toLocaleString('en-US').slice(0, -1)\n  }\n\n  const calculateAPY = useCallback(\n    (farmsToDisplay) => {\n      const cakePriceVsBNB = new BigNumber(farmsLP.find((farm) => farm.pid === CAKE_POOL_PID)?.tokenPriceVsQuote || 0)\n\n      farmsToDisplay.map((farm) => {\n        if (!farm.tokenAmount || !farm.lpTotalInQuoteToken || !farm.lpTotalInQuoteToken) {\n          return farm\n        }\n        const cakeRewardPerBlock = CAKE_PER_BLOCK.times(farm.poolWeight)\n        const cakeRewardPerYear = cakeRewardPerBlock.times(BLOCKS_PER_YEAR)\n\n        let apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken)\n\n        if (farm.quoteTokenSymbol === QuoteToken.BUSD) {\n          apy = cakePriceVsBNB.times(cakeRewardPerYear).div(farm.lpTotalInQuoteToken).times(bnbPrice)\n        } else if (farm.quoteTokenSymbol === QuoteToken.CAKE) {\n          apy = cakeRewardPerYear.div(farm.lpTotalInQuoteToken)\n        } else if (farm.dual) {\n          const cakeApy =\n            farm && cakePriceVsBNB.times(cakeRewardPerBlock).times(BLOCKS_PER_YEAR).div(farm.lpTotalInQuoteToken)\n          const dualApy =\n            farm.tokenPriceVsQuote &&\n            new BigNumber(farm.tokenPriceVsQuote)\n              .times(farm.dual.rewardPerBlock)\n              .times(BLOCKS_PER_YEAR)\n              .div(farm.lpTotalInQuoteToken)\n\n          apy = cakeApy && dualApy && cakeApy.plus(dualApy)\n        }\n\n        if (maxAPY.current < apy.toNumber()) maxAPY.current = apy.toNumber()\n\n        return apy\n      })\n    },\n    [bnbPrice, farmsLP],\n  )\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading color=\"contrast\" size=\"lg\">\n          Earn up to\n        </Heading>\n        <CardMidContent color=\"#7645d9\">\n          {getHighestAPY() ? (\n            `${getHighestAPY()}% ${TranslateString(736, 'APR')}`\n          ) : (\n            <Skeleton animation=\"pulse\" variant=\"rect\" height=\"44px\" />\n          )}\n        </CardMidContent>\n        <Flex justifyContent=\"space-between\">\n          <Heading color=\"contrast\" size=\"lg\">\n            in Farms\n          </Heading>\n          <NavLink exact activeClassName=\"active\" to=\"/farms\" id=\"farm-apy-cta\">\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </NavLink>\n        </Flex>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default EarnAPYCard\n","import { usePriceCakeBusd } from 'state/hooks'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport { useTotalRewards } from './useTickets'\n\nconst useLotteryTotalPrizesUsd = () => {\n  const totalRewards = useTotalRewards()\n  const totalCake = getBalanceNumber(totalRewards)\n  const cakePriceBusd = usePriceCakeBusd()\n\n  return totalCake * cakePriceBusd.toNumber()\n}\n\nexport default useLotteryTotalPrizesUsd\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Card, CardBody, Flex, ArrowForwardIcon } from '@pancakeswap-libs/uikit'\nimport { NavLink } from 'react-router-dom'\nimport useLotteryTotalPrizesUsd from 'hooks/useLotteryTotalPrizesUsd'\n\nconst StyledFarmStakingCard = styled(Card)`\n  margin-left: auto;\n  margin-right: auto;\n  width: 100%;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    margin: 0;\n    max-width: none;\n  }\n`\nconst CardMidContent = styled(Heading).attrs({ size: 'xl' })`\n  line-height: 44px;\n`\nconst WinCard = () => {\n  const lotteryPrize = Math.round(useLotteryTotalPrizesUsd()).toLocaleString()\n\n  return (\n    <StyledFarmStakingCard>\n      <CardBody>\n        <Heading color=\"contrast\" size=\"lg\">\n          Lottery with\n        </Heading>\n        <CardMidContent color=\"#7645d9\">${lotteryPrize}</CardMidContent>\n        <Flex justifyContent=\"space-between\">\n          <Heading color=\"contrast\" size=\"lg\">\n            up for grabs\n          </Heading>\n          <NavLink exact activeClassName=\"active\" to=\"/lottery\" id=\"lottery-pot-cta\">\n            <ArrowForwardIcon mt={30} color=\"primary\" />\n          </NavLink>\n        </Flex>\n      </CardBody>\n    </StyledFarmStakingCard>\n  )\n}\n\nexport default WinCard\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Heading, Text, BaseLayout } from '@pancakeswap-libs/uikit'\nimport useI18n from 'hooks/useI18n'\nimport Page from 'components/layout/Page'\nimport FarmStakingCard from 'views/Home/components/FarmStakingCard'\nimport LotteryCard from 'views/Home/components/LotteryCard'\nimport CakeStats from 'views/Home/components/CakeStats'\nimport TotalValueLockedCard from 'views/Home/components/TotalValueLockedCard'\nimport EarnAPYCard from 'views/Home/components/EarnAPYCard'\nimport EarnAssetCard from 'views/Home/components/EarnAssetCard'\nimport WinCard from 'views/Home/components/WinCard'\n\nconst Hero = styled.div`\n  align-items: center;\n  background-image: url('/images/dragon_egg.png');\n  background-repeat: no-repeat;\n  background-size: 100px 100px;\n  background-position: top center;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  margin: auto;\n  margin-bottom: 32px;\n  padding-top: 116px;\n  text-align: center;\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    background-image: url('/images/dragon_full.png'), url('/images/dragon_egg.png');\n    background-position: left center, right center;\n    background-size: 200px;\n    height: 320px;\n    padding-top: 0;\n  }\n`\n\n\n\nconst Cards = styled(BaseLayout)`\n  align-items: stretch;\n  justify-content: stretch;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n    width: 100%;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 6;\n    }\n  }\n`\n\nconst CTACards = styled(BaseLayout)`\n  align-items: start;\n  margin-bottom: 32px;\n\n  & > div {\n    grid-column: span 6;\n  }\n\n  ${({ theme }) => theme.mediaQueries.sm} {\n    & > div {\n      grid-column: span 8;\n    }\n  }\n\n  ${({ theme }) => theme.mediaQueries.lg} {\n    & > div {\n      grid-column: span 4;\n    }\n  }\n`\n\nconst Home: React.FC = () => {\n  const TranslateString = useI18n()\n\n  return (\n    <Page>\n      <Hero>\n        <Heading as=\"h1\" size=\"xxl\" mb=\"24px\" >\n          <span style={{color:'#ea4335'}}>D</span><span style={{color:'#ff8433'}}>r</span><span style={{color:'#fbbc06'}}>a</span><span style={{color:'#34a853'}}>g</span><span style={{color:'#4285f4'}}>o</span><span style={{color:'#662d91'}}>n</span><span style={{color:'#ea4335'}}>S</span><span style={{color:'#fbbc06'}}>w</span><span style={{color:'#34a853'}}>a</span><span style={{color:'#4285f4'}}>p</span>\n        </Heading>\n        <Text fontSize=\"24px\">{TranslateString(578, 'The center of sustainable and profitable BSC farming')}</Text>\n      </Hero>\n      <div>\n        <Cards>\n          <FarmStakingCard />\n          <LotteryCard />\n          <CakeStats />\n          <TotalValueLockedCard />\n          <EarnAPYCard />\n          <WinCard />\n        </Cards>\n      </div>\n    </Page>\n  )\n}\n\nexport default Home\n"],"sourceRoot":""}